Problem Statement:

Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.
Assume a BST is defined as follows:
The left subtree of a node contains only nodes with keys less than or equal to the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.

For example:
Given BST [1,null,2,2],

   1
    \
     2
    /
   2
 

return [2].


Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findMode(self, root: TreeNode) -> List[int]:
        dict={}
        def check(root):
            if not root:
                return None
            check(root.left)
            if root.val not in dict:
                dict[root.val]=1
            else:
                dict[root.val]+=1
            check(root.right)
        check(root)
        
        if not dict:
            return []
        mx = max(dict.values())
        li=[i for i,j in dict.items() if j==mx]
        return li
