Problem Statement:

Given an unsorted array of integers, find the length of longest continuous increasing subsequence (subarray).

Example 1:
Input: [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5], its length is 3. 
Even though [1,3,5,7] is also an increasing subsequence, it's not a continuous one where 5 and 7 are separated by 4. 

Example 2:
Input: [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2], its length is 1.



Solution:
class Solution:
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        ################## Using Array
        if not nums:
            return 0
        mx=0
        cnt=1
        stack=[]
        for i in nums:
            if not stack:
                stack+=[i]
            else:
                if stack[-1]<i:
                    cnt+=1
                    stack+=[i]
                else:
                    stack=[i]
                    mx=max(mx,cnt)
                    cnt=1
        mx=max(mx,cnt)
        return mx
                    
        ################# Using dp
        """
         if not nums:
            return 0
        dp=[1]+[0]*(len(nums)-1)
        for i in range(1,len(nums)):
            if nums[i]>nums[i-1]:
                dp[i]=dp[i-1]+1
            else:
                dp[i]=1
        return max(dp)
        """
