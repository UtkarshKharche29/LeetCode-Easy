Problem Statement:

Given a binary tree, return the bottom-up level order traversal of its nodes' values. 
(ie, from left to right, level by level from leaf to root).
For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]


Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return []
        li=[root]
        res=[[root.val]]
        while li:
            temp=[]
            temp1=[]
            for i in li:
                if i.left:
                    temp1.append(i.left.val)
                    temp.append(i.left)
                    
                if i.right:
                    temp1.append(i.right.val)
                    temp.append(i.right)
            if temp:
                li=temp
            else:
                break
            res.append(temp1)
        return res[::-1]
