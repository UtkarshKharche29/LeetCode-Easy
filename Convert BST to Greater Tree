Problem Statement:

Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key 
plus sum of all keys greater than the original key in BST.

Example:
Input: The root of a Binary Search Tree like this:
              5
            /   \
           2     13

Output: The root of a Greater Tree like this:
             18
            /   \
          20     13
          
          
 Solution:
 # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def __init__(self):
        self.total=0
        
    def convertBST(self, root: TreeNode) -> TreeNode:
        ######## Iterative O(N);O(N)
        node=root
        stack=[]
        while stack or node:
            while node:
                stack.append(node)
                node=node.right
            node=stack.pop()
            self.total+=node.val
            node.val=self.total
            node=node.left
        return root
        
        ######## Recursive O(N);O(N)
        self.total=0
        def convert(root):
            if not root:
                return
            convert(root.right)
            root.val+=self.total
            self.total=root.val
            convert(root.left)
            return root
        return convert(root)
