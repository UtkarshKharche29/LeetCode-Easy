Problem Statement:

Given a binary tree, return all root-to-leaf paths.
Note: A leaf is a node with no children.
Example:
Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3



Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    
    def binaryTreePaths(self, root: TreeNode) -> List[str]:
        if not root:
            return
        path=[]
        new=[]
        def check(root):
            if not root:
                return None
            
            new.append(str(root.val))
            if not root.left and not root.right:
                path.append("->".join(new))
            check(root.left)
            check(root.right)
            new.pop()
            
        check(root)
        return(path)
      
            
