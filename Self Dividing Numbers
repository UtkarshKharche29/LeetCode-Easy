Problem Statement:

A self-dividing number is a number that is divisible by every digit it contains.
For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.
Also, a self-dividing number is not allowed to contain the digit zero.
Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.

Example 1:
Input: 
left = 1, right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]


Solution:
class Solution:
    def selfDividingNumbers(self, left: int, right: int) -> List[int]:
        '''
        li=[]
        for digits in range(left,right+1):
            s=""
            for digit in str(digits):
            
                try:
                    if digits%int(digit)==0:
                        s+=digit
                except:
                    continue
            
            if s==str(digits):
                li.append(s)
        return(list(map(int,li)))
        '''
        li=[]
        flag=False
        for i in range(left,right+1):
            temp=i
            while temp>0:
                n=temp%10
                if n!=0 and i%n==0:
                    temp=temp//10
                    flag=True
                else:
                    flag=False
                    break
            if flag:
                li.append(i)
        return li
