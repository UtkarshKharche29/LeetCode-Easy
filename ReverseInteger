class Solution(object):
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        reverse = 0
        # when input greater than 0
        if x > 0:
            while(x>0):
                end = x%10 
                # this will give you the last digit of this integer
                # there is a special case in this step
                # if the last digit is zero
                # the modulus will be 0, so next step you will add 
                # then reverse will keep same
                # it is like you start it from nonzero digit
                
                reverse = reverse*10 + end 
                # everytime you get a digit from last step, you need to multiply by 10 except                   the first time because previous number should be at the left side of current                   number. And we know we have to multiply by 10 to be the left side of current                   number
                
                x = x//10 
                # after getting the last digit, we will remove the last digit in this step
                
            # if reversed integer not overflow
            
            if reverse < 2**31-1:
                return reverse
            
            # if reversed integer overflow
            
            else:
                return 0
        # when input less than 0
        
        if x < 0:
            while(abs(x)>0):
                dig=abs(x)%10
                reverse=reverse*10+dig
                x=abs(x)//10
            # same as above
            
            if -reverse > -2**31:
                return -reverse
            else:
                return 0
        # when input is equal to 0
        
        if x == 0:
            return x
