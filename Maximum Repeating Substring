Problem Statement:

For a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. The word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. If word is not a substring of sequence, word's maximum k-repeating value is 0.
Given strings sequence and word, return the maximum k-repeating value of word in sequence.

Example 1:
Input: sequence = "ababc", word = "ab"
Output: 2
Explanation: "abab" is a substring in "ababc".

Example 2:
Input: sequence = "ababc", word = "ba"
Output: 1
Explanation: "ba" is a substring in "ababc". "baba" is not a substring in "ababc".

Example 3:
Input: sequence = "ababc", word = "ac"
Output: 0
Explanation: "ac" is not a substring in "ababc". 



Solution:
class Solution:
    def maxRepeating(self, sequence: str, word: str) -> int:
        
        ######### O(nk); O(1)
        mx=0
        temp=0
        left=0
        while left<=len(sequence)-len(word):
            if sequence[left:left+len(word)] == word:
                temp+=1
                left=left+len(word)
            else:
                left+=1
                mx=max(mx,temp)
                temp=0
                
        mx=max(mx,temp)
        return mx
