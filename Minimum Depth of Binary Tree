Problem Statement:

Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
Note: A leaf is a node with no children.
Example:
Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its minimum depth = 2.


Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def minDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        stack=[root]
        depth=1
        while stack:
            st=[]
            for temp in stack: 
                if temp.left:
                    st.append(temp.left)
                if temp.right:
                    st.append(temp.right)
                if not temp.left and not temp.right:
                    return depth
            if st:
                stack=st
                depth+=1
            else:
                break
        
