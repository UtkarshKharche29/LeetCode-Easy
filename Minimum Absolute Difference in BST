Problem Statement:

Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.
Example:
Input:

   1
    \
     3
    /
   2

Output:
1

Explanation:
The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).



Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def getMinimumDifference(self, root: TreeNode) -> int:
        """
        li=[]
        def check(root):
            if not root:
                return
            check(root.left)
            li.append(root.val)
            check(root.right)
        check(root)
        minn=float("inf")
        for i in range(len(li)-1):
            if abs(li[i]-li[i+1])<minn:
                minn=abs(li[i]-li[i+1])
        return minn
        """
        self.minn=float("inf")
        self.curr=None
        def checkmin(root):
            if not root:
                return 
            checkmin(root.left)
            if self.curr:
                self.minn=min(self.minn,abs(root.val-self.curr.val))
            self.curr=root
            checkmin(root.right)
            return self.minn
        
        checkmin(root)
        return self.minn
