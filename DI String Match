Problem Statement:

Given a string S that only contains "I" (increase) or "D" (decrease), let N = S.length.
Return any permutation A of [0, 1, ..., N] such that for all i = 0, ..., N-1:

If S[i] == "I", then A[i] < A[i+1]
If S[i] == "D", then A[i] > A[i+1]
 

Example 1:
Input: "IDID"
Output: [0,4,1,3,2]

Example 2:
Input: "III"
Output: [0,1,2,3]

Example 3:
Input: "DDI"
Output: [3,2,0,1]

Solution:
class Solution:
    def diStringMatch(self, S: str) -> List[int]:
        #N=len(S)
        #li=[i for i in range(N+1)]
        
        new=[]
        i=0
        j=len(S)
        for each in S:
            if each=="I":
                new+=[i]
                i+=1
            elif each=="D":
                new+=[j]
                j-=1
        new+=[i]
        return(new)
                
 
