Problem Statement:

Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.
Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:
Input: [1, 2, 2, 3, 1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:
Input: [1,2,2,3,1,4,2]
Output: 6


Solution:
class Solution:
    def findShortestSubArray(self, nums: List[int]) -> int:
        dict=collections.defaultdict(list)
        for i in range(len(nums)):
            if nums[i] not in dict:
                dict[nums[i]]=[i]
            else:
                dict[nums[i]]+=[i]
        maxx=[len(i) for i in dict.values()]
        maxx=max(maxx)
    
        temp=float("inf")
        for i,j in dict.items():
            if len(dict[i])==maxx:
                temp=min(temp,(j[-1]-j[0])+1)
        print(dict)
        return temp
                
