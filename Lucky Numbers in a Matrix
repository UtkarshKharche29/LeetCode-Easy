Problem Statement:

Given a m * n matrix of distinct numbers, return all lucky numbers in the matrix in any order.
A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.

Example 1:
Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column

Example 2:
Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.

Example 3:
Input: matrix = [[7,8],[1,2]]
Output: [7]



Solution:
class Solution:
    def luckyNumbers (self, matrix: List[List[int]]) -> List[int]:
        
        minli=[min(i) for i in matrix]
        maxli=[]
        for j in range(len(matrix[0])):
            #minli+=[min(matrix[0])]
            maxx=float("-inf")
            for i in range(len(matrix)):
                if matrix[i][j]>maxx:
                    maxx=matrix[i][j]
            
            maxli+=[maxx]
        return list(set(minli)&set(maxli))
