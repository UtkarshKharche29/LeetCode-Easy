Problem Statement:

Given a rows x cols matrix mat, where mat[i][j] is either 0 or 1, return the number of special positions in mat.
A position (i,j) is called special if mat[i][j] == 1 and all other elements in row i and column j are 0 (rows and columns are 0-indexed).

Example 1:
Input: mat = [[1,0,0],
              [0,0,1],
              [1,0,0]]
Output: 1
Explanation: (1,2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0.

Example 2:
Input: mat = [[1,0,0],
              [0,1,0],
              [0,0,1]]
Output: 3
Explanation: (0,0), (1,1) and (2,2) are special positions. 

Example 3:
Input: mat = [[0,0,0,1],
              [1,0,0,0],
              [0,1,1,0],
              [0,0,0,0]]
Output: 2

Example 4:
Input: mat = [[0,0,0,0,0],
              [1,0,0,0,0],
              [0,1,0,0,0],
              [0,0,1,0,0],
              [0,0,0,1,1]]
Output: 3



SOlution:
class Solution:
    def numSpecial(self, mat: List[List[int]]) -> int:
        
        ####### O(nm);O(nm)
        
        rows=[0]*len(mat)
        columns=[0]*len(mat[0])
        ones=[]
        
        for i in range(len(mat)):
            for j in range(len(mat[0])):
                if mat[i][j]==1:
                    ones.append((i,j))
                    rows[i]+=1
                    columns[j]+=1
        
        cnt=0
        for i,j in ones:
            if rows[i]==1 and columns[j]==1:
                cnt+=1
        return cnt
