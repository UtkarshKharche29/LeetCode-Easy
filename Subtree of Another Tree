Problem Statement:

Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. 
A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree 
of itself.

Example 1:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
Given tree t:
   4 
  / \
 1   2
Return true, because t has the same structure and node values with a subtree of s.
 
Example 2:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
    /
   0
Given tree t:
   4
  / \
 1   2
Return false.


Solution:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:
        lis,lit=[],[]
        def traverse(strr,root):
            if not root:
                strr.append("#none")
                return
            strr+=["#"+str(root.val)]
            traverse(strr,root.left)
            traverse(strr,root.right)
        traverse(lis,s)
        traverse(lit,t)
        if "".join(lit) in "".join(lis):
            return True
        else:
            return False
        
