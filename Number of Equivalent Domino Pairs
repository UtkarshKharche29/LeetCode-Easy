Problem Statement:

Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a==c and b==d), or (a==d and b==c) - that is, one domino can be rotated to be equal to another domino.
Return the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].

Example 1:
Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]
Output: 1


Solution:
class Solution:
    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:
        
        ### O(n),less than O(n)
        dict={}
        for each in dominoes:
            temp=str(each[0])+str(each[1])
            if temp in dict:
                dict[temp]+=1
            elif temp[::-1] in dict:
                dict[temp[::-1]]+=1
            else:
                dict[temp]=1
        #print(dict)
        pairs=0
        for value in dict.values():
            if value>=2:
                pairs+=(value*(value-1))//2
        return pairs
