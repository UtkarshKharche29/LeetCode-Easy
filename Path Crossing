Problem Statement:

Given a string path, where path[i] = 'N', 'S', 'E' or 'W', each representing moving one unit north, south, east, or west, respectively. You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.
Return True if the path crosses itself at any point, that is, if at any time you are on a location you've previously visited. Return False otherwise.

Example 1:
Input: path = "NES"
Output: false 
Explanation: Notice that the path doesn't cross any point more than once.

Example 2:
Input: path = "NESWW"
Output: true
Explanation: Notice that the path visits the origin twice.



SOlution:
class Solution:
    def isPathCrossing(self, path: str) -> bool:
        #### O(N),O(N)
        st={(0,0)}
        x,y=0,0
        for i in path:
            if i == "N":
                x=x+1

            elif i=="E":
                y=y+1
                
            elif i=="S":
                x=x-1
            
            else:
                y=y-1
                
            if (x,y) in st:
                return True
            else:
                st.add((x,y))
            # print(x,y)
        return False
                
 
