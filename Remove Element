Problem Statement:

Given an array nums and a value val, remove all instances of that value in-place and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Solution:

1.  While all the values i.e val are not removed from the list i.e nums (Faster than 60% of solutions)
    
    class Solution:
        def removeElement(self, nums: List[int], val: int) -> int:
            while val in nums:
                    nums.remove(val)
            return(len(nums))

2.  checking for count of val in nums, remove val one by one from nums using for loop (Faster than 90% of solutions)

    class Solution:
        def removeElement(self, nums: List[int], val: int) -> int:        
            length=nums.count(val)
            for i in range(length):
                nums.remove(val)
            return(len(nums))
